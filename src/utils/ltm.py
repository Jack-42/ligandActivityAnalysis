"""
@author Jack Ringer
Date: 7/14/2025
Description:
Helper functions related to reading the lower triangular (LTM)
matrix of similarity values generated by RDKit.
"""

import math

import numpy as np


def get_triangle_number(n: int) -> int:
    return (n * (n - 1)) // 2


def get_triangle_root(tn: int) -> int:
    # solved for using quadratic formula
    # +1 here account for 0-indexing
    return int(0.5 * (-1 + math.sqrt(1 + 8 * tn))) + 1


def get_ltm_idx(row: int, col: int) -> int:
    """
    In the LTM (e.g., from GetTanimotoSimMat), find the
    index of the coefficient value between the given row/column.

    :param int row: index of molecule 1 in id_list ("row" in matrix)
    :param int col: index of molecule 2 in id_list ("column" in matrix)
    :return int: index in the LTM with coeff value
    """
    assert col < row
    offset = get_triangle_number(row)
    return offset + col


def get_row_col_from_ltm_idx(ltm_idx: int) -> tuple[int, int]:
    row = get_triangle_root(ltm_idx)
    offset = get_triangle_number(row)
    col = ltm_idx - offset
    assert get_ltm_idx(row, col) == ltm_idx
    return row, col


def get_id2idx_map(id_list: list[int]) -> dict:
    return {cpd_id: i for i, cpd_id in enumerate(id_list)}


def get_idx2id_map(id_list: list[int]) -> dict:
    return {i: cpd_id for i, cpd_id in enumerate(id_list)}


def check_size(sim_matrix: np.ndarray, N: int):
    assert (
        len(sim_matrix.shape) == 1
    ), f"Expected LTM to be a 1D numpy array, given shape: {sim_matrix.shape}"
    assert len(sim_matrix) == (
        N * (N - 1) // 2
    ), "Mismatch between length of given id_list and LTM, check input"


def get_ltm_indices_from_col(col: int, N: int) -> list[int]:
    """
    Get all LTM indices for a given column.
    For column c, the rows are c+1, c+2, ..., N-1

    :param col: The column index
    :param N: Total number of rows/columns in the matrix
    """
    indices = []
    for row in range(col + 1, N):
        ltm_idx = get_ltm_idx(row, col)
        indices.append(ltm_idx)
    return indices


def get_ltm_indices_from_row(row: int) -> list[int]:
    """
    For row r, indices are: offset + 0, offset + 1, ..., offset + (r-1)
    where offset = r*(r-1)//2
    """
    if row == 0:
        return []
    offset = get_triangle_number(row)
    return list(range(offset, offset + row))


def get_all_ltm_indices_from_idx(i: int, N: int) -> list[int]:
    # get all similarity values linked to a given ligand index i
    ltm_row_idxes = get_ltm_indices_from_row(i)
    ltm_col_idxes = get_ltm_indices_from_col(i, N)
    return ltm_row_idxes + ltm_col_idxes
